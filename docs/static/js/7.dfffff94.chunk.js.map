{"version":3,"sources":["components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Section/index.js","components/Text/index.js","components/DecoderText/index.js","components/Divider/index.js"],"names":["TextArea","className","resize","value","onChange","minRows","maxRows","rest","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","useRef","useEffect","style","getComputedStyle","current","lineHeight","parseInt","paddingHeight","paddingTop","paddingBottom","classNames","ref","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","numToMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","getStatusError","Error","Section","Helmet","name","content","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","prerender","level","as","durationXS","DecoderText","text","start","delay","Divider","required","autoComplete","type","maxLength","errorStatus","Button","disabled","loading","loadingText","Text","size","secondary","iconHoverShift","href","children","align","weight","clampedLevel","Math","min","max","Component","rel","GothamBold","crossorigin","forwardRef","glyphs","CharType","startDelay","output","container","reduceMotion","usePrefersReducedMotion","containerInstance","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","chain","spring","from","to","stiffness","damping","stop","memo","lineWidth","notchWidth","notchHeight","collapseDelay","collapsed","defaultProps"],"mappings":"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","file":"static/js/7.dfffff94.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from 'react'\nimport classNames from 'classnames'\nimport './TextArea.css'\n\nconst TextArea = ({\n    className,\n    resize = 'none',\n    value,\n    onChange,\n    minRows = 1,\n    maxRows,\n    ...rest\n}) => {\n    const [rows, setRows] = useState(minRows)\n    const [textareaDimensions, setTextareaDimensions] = useState()\n    const textareaRef = useRef()\n\n    useEffect(() => {\n        const style = getComputedStyle(textareaRef.current)\n        const lineHeight = parseInt(style.lineHeight, 10)\n        const paddingHeight =\n            parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10)\n        setTextareaDimensions({ lineHeight, paddingHeight })\n    }, [])\n\n    const handleChange = event => {\n        onChange(event)\n\n        const { lineHeight, paddingHeight } = textareaDimensions\n        const previousRows = event.target.rows\n        event.target.rows = minRows\n\n        const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight)\n\n        if (currentRows === previousRows) {\n            event.target.rows = currentRows\n        }\n\n        if (maxRows && currentRows >= maxRows) {\n            event.target.rows = maxRows\n            event.target.scrollTop = event.target.scrollHeight\n        }\n\n        setRows(maxRows && currentRows > maxRows ? maxRows : currentRows)\n    }\n\n    return (\n        <textarea\n            className={classNames('textarea', className)}\n            ref={textareaRef}\n            onChange={handleChange}\n            style={{ '--resize': resize }}\n            rows={rows}\n            value={value}\n            {...rest}\n        />\n    )\n}\n\nexport default TextArea\n","import { useState, useRef } from 'react'\nimport classNames from 'classnames'\nimport { TransitionGroup, Transition } from 'react-transition-group'\nimport TextArea from './TextArea'\nimport { useId } from 'hooks'\nimport { isVisible } from 'utils/transition'\nimport { tokens } from 'components/ThemeProvider/theme'\nimport { msToNum, numToPx } from 'utils/style'\nimport Icon from 'components/Icon'\nimport './index.css'\n\nconst Input = ({\n    id,\n    label,\n    hasValue,\n    value,\n    multiline,\n    className,\n    style,\n    error,\n    onBlur,\n    ...rest\n}) => {\n    const [focused, setFocused] = useState(false)\n    const generatedId = useId()\n    const errorRef = useRef()\n    const inputId = id || `input-${generatedId}`\n    const labelId = `${inputId}-label`\n    const errorId = `${inputId}-error`\n    const InputElement = multiline ? TextArea : 'input'\n\n    const handleBlur = event => {\n        setFocused(false)\n\n        if (onBlur) {\n            onBlur(event)\n        }\n    }\n\n    return (\n        <div\n            className={classNames('input', className, { 'input--error': !!error })}\n            style={style}\n        >\n            <div className=\"input__content\">\n                <label\n                    className={classNames('input__label', {\n                        'input__label--focused': focused,\n                        'input__label--has-value': !!value,\n                    })}\n                    id={labelId}\n                    htmlFor={inputId}\n                >\n                    {label}\n                </label>\n                <InputElement\n                    className=\"input__element\"\n                    id={inputId}\n                    aria-labelledby={labelId}\n                    aria-describedby={!!error ? errorId : undefined}\n                    onFocus={() => setFocused(true)}\n                    onBlur={handleBlur}\n                    value={value}\n                    {...rest}\n                />\n                <div\n                    className={classNames('input__underline', {\n                        'input__underline--focused': focused,\n                    })}\n                />\n            </div>\n            <TransitionGroup component={null}>\n                {!!error && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                        {status => (\n                            <div\n                                className={classNames(\n                                    'input__error',\n                                    `input__error--${status}`\n                                )}\n                                id={errorId}\n                                role=\"alert\"\n                                style={{\n                                    '--height': isVisible(status)\n                                        ? numToPx(\n                                              errorRef.current?.getBoundingClientRect()\n                                                  .height\n                                          )\n                                        : '0px',\n                                }}\n                            >\n                                <div className=\"input__error-message\" ref={errorRef}>\n                                    <Icon icon=\"error\" />\n                                    {error}\n                                </div>\n                            </div>\n                        )}\n                    </Transition>\n                )}\n            </TransitionGroup>\n        </div>\n    )\n}\n\nexport default Input\n","import { useState, useCallback, useRef } from 'react'\nimport classNames from 'classnames'\nimport { TransitionGroup, Transition } from 'react-transition-group'\nimport { Helmet } from 'react-helmet'\nimport Input from 'components/Input'\nimport DecoderText from 'components/DecoderText'\nimport Divider from 'components/Divider'\nimport { Button } from 'components/Button'\nimport Section from 'components/Section'\nimport Icon from 'components/Icon'\nimport { useScrollRestore, useFormInput, useRouteTransition } from 'hooks'\nimport { reflow, isVisible } from 'utils/transition'\nimport prerender from 'utils/prerender'\nimport { msToNum, numToPx, numToMs } from 'utils/style'\nimport { tokens } from 'components/ThemeProvider/theme'\nimport Heading from 'components/Heading'\nimport Text from 'components/Text'\nimport './index.css'\n\nconst initDelay = tokens.base.durationS\n\nfunction getStatusError({\n    status,\n    errorMessage,\n    fallback = 'There was a problem with your request',\n}) {\n    if (status === 200) return false\n\n    const statuses = {\n        500: 'There was a problem with the server, try again later',\n        404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n    }\n\n    if (errorMessage) {\n        return errorMessage\n    }\n\n    return statuses[status] || fallback\n}\n\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n    const numDelay = msToNum(delayMs) * multiplier\n    return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) }\n}\n\nconst Contact = () => {\n    const { status } = useRouteTransition()\n    const errorRef = useRef()\n    const email = useFormInput('')\n    const message = useFormInput('')\n    const [sending, setSending] = useState(false)\n    const [complete, setComplete] = useState(false)\n    const [statusError, setStatusError] = useState('')\n    useScrollRestore()\n\n    const onSubmit = useCallback(\n        async event => {\n            event.preventDefault()\n            setStatusError('')\n\n            if (sending) return\n\n            try {\n                setSending(true)\n\n                const response = await fetch('/api/message', {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        email: email.value,\n                        message: message.value,\n                    }),\n                })\n\n                const responseMessage = await response.json()\n\n                const statusError = getStatusError({\n                    status: response?.status,\n                    errorMessage: responseMessage?.error,\n                    fallback: 'There was a problem sending your message',\n                })\n\n                if (statusError) throw new Error(statusError)\n\n                setComplete(true)\n                setSending(false)\n            } catch (error) {\n                setSending(false)\n                setStatusError(error.message)\n            }\n        },\n        [email.value, message.value, sending]\n    )\n\n    return (\n        <Section className={classNames('contact', `contact--${status}`)}>\n            <Helmet>\n                <title>Contact | Alen Yohannan</title>\n                <meta\n                    name=\"description\"\n                    content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\n                />\n            </Helmet>\n            <TransitionGroup component={null}>\n                {!complete && (\n                    <Transition\n                        appear\n                        mountOnEnter\n                        unmountOnExit\n                        timeout={1600}\n                        onEnter={reflow}\n                    >\n                        {status => (\n                            <form\n                                className=\"contact__form\"\n                                method=\"post\"\n                                onSubmit={onSubmit}\n                            >\n                                <Heading\n                                    className={classNames(\n                                        'contact__title',\n                                        `contact__title--${status}`,\n                                        {\n                                            'contact__title--hidden': prerender,\n                                        }\n                                    )}\n                                    level={3}\n                                    as=\"h1\"\n                                    style={getDelay(\n                                        tokens.base.durationXS,\n                                        initDelay,\n                                        0.3\n                                    )}\n                                >\n                                    <DecoderText\n                                        text=\"联系我们\"\n                                        start={status !== 'exited' && !prerender}\n                                        delay={300}\n                                    />\n                                </Heading>\n                                <Divider\n                                    className={classNames(\n                                        'contact__divider',\n                                        `contact__divider--${status}`,\n                                        { 'contact__divider--hidden': prerender }\n                                    )}\n                                    style={getDelay(\n                                        tokens.base.durationXS,\n                                        initDelay,\n                                        0.4\n                                    )}\n                                />\n                                <Input\n                                    required\n                                    className={classNames(\n                                        'contact__input',\n                                        `contact__input--${status}`,\n                                        {\n                                            'contact__input--hidden': prerender,\n                                        }\n                                    )}\n                                    style={getDelay(tokens.base.durationXS, initDelay)}\n                                    autoComplete=\"email\"\n                                    label=\"您的邮箱\"\n                                    type=\"email\"\n                                    maxLength={512}\n                                    {...email}\n                                />\n                                <Input\n                                    required\n                                    multiline\n                                    className={classNames(\n                                        'contact__input',\n                                        `contact__input--${status}`,\n                                        {\n                                            'contact__input--hidden': prerender,\n                                        }\n                                    )}\n                                    style={getDelay(tokens.base.durationS, initDelay)}\n                                    autoComplete=\"off\"\n                                    label=\"内容\"\n                                    maxLength={4096}\n                                    {...message}\n                                />\n                                <TransitionGroup component={null}>\n                                    {!!statusError && (\n                                        <Transition\n                                            timeout={msToNum(tokens.base.durationM)}\n                                        >\n                                            {errorStatus => (\n                                                <div\n                                                    className={classNames(\n                                                        'contact__form-error',\n                                                        `contact__form-error--${errorStatus}`\n                                                    )}\n                                                    style={{\n                                                        '--height': isVisible(errorStatus)\n                                                            ? numToPx(\n                                                                  errorRef.current?.getBoundingClientRect()\n                                                                      .height\n                                                              )\n                                                            : '0px',\n                                                    }}\n                                                >\n                                                    <div\n                                                        className=\"contact__form-error-content\"\n                                                        ref={errorRef}\n                                                    >\n                                                        <div className=\"contact__form-error-message\">\n                                                            <Icon\n                                                                className=\"contact__form-error-icon\"\n                                                                icon=\"error\"\n                                                            />\n                                                            {statusError}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </Transition>\n                                    )}\n                                </TransitionGroup>\n                                <Button\n                                    className={classNames(\n                                        'contact__button',\n                                        `contact__button--${status}`,\n                                        {\n                                            'contact__button--hidden': prerender,\n                                            'contact__button--sending': sending,\n                                        }\n                                    )}\n                                    style={getDelay(tokens.base.durationM, initDelay)}\n                                    disabled={sending}\n                                    loading={sending}\n                                    loadingText=\"Sending...\"\n                                    icon=\"send\"\n                                    type=\"submit\"\n                                >\n                                    发送\n                                </Button>\n                            </form>\n                        )}\n                    </Transition>\n                )}\n                {complete && (\n                    <Transition\n                        appear\n                        mountOnEnter\n                        unmountOnExit\n                        onEnter={reflow}\n                        timeout={0}\n                    >\n                        {status => (\n                            <div className=\"contact__complete\" aria-live=\"polite\">\n                                <Heading\n                                    level={3}\n                                    as=\"h3\"\n                                    className={classNames(\n                                        'contact__complete-title',\n                                        `contact__complete-title--${status}`\n                                    )}\n                                >\n                                    Message Sent\n                                </Heading>\n                                <Text\n                                    size=\"l\"\n                                    className={classNames(\n                                        'contact__complete-text',\n                                        `contact__complete-text--${status}`\n                                    )}\n                                    style={getDelay(tokens.base.durationXS)}\n                                >\n                                    I’ll get back to you within a couple days, sit tight\n                                </Text>\n                                <Button\n                                    secondary\n                                    iconHoverShift\n                                    className={classNames(\n                                        'contact__complete-button',\n                                        `contact__complete-button--${status}`\n                                    )}\n                                    style={getDelay(tokens.base.durationM)}\n                                    href=\"/\"\n                                    icon=\"chevronRight\"\n                                >\n                                    Back to homepage\n                                </Button>\n                            </div>\n                        )}\n                    </Transition>\n                )}\n            </TransitionGroup>\n        </Section>\n    )\n}\n\nexport default Contact\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react'\nimport classNames from 'classnames'\nimport { Helmet } from 'react-helmet'\nimport GothamBold from 'assets/fonts/gotham-bold.woff2'\nimport './index.css'\n\nconst Heading = ({\n    children,\n    level = 1,\n    as,\n    align = 'auto',\n    weight = 'medium',\n    className,\n    ...rest\n}) => {\n    const clampedLevel = Math.min(Math.max(level, 0), 4)\n    const Component = as || `h${Math.max(clampedLevel, 1)}`\n\n    return (\n        <Fragment>\n            {/* Conditionally load the bold font weight because we use it less frequently */}\n            {weight === 'bold' && (\n                <Helmet>\n                    <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n                    <style>\n                        {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n                    </style>\n                </Helmet>\n            )}\n            <Component\n                className={classNames(\n                    className,\n                    'heading',\n                    `heading--align-${align}`,\n                    `heading--level-${clampedLevel}`,\n                    `heading--weight-${weight}`\n                )}\n                {...rest}\n            >\n                {children}\n            </Component>\n        </Fragment>\n    )\n}\n\nexport default Heading\n","import { forwardRef } from 'react'\nimport classNames from 'classnames'\nimport './index.css'\n\nconst Section = forwardRef(\n    ({ as: Component = 'div', children, className, ...rest }, ref) => (\n        <Component className={classNames('section', className)} ref={ref} {...rest}>\n            {children}\n        </Component>\n    )\n)\n\nexport default Section\n","import classNames from 'classnames'\nimport './index.css'\n\nconst Text = ({\n    children,\n    size = 'm',\n    as: Component = 'p',\n    align = 'auto',\n    weight = 'auto',\n    secondary,\n    className,\n    ...rest\n}) => {\n    return (\n        <Component\n            className={classNames(\n                className,\n                'text',\n                `text--align-${align}`,\n                `text--size-${size}`,\n                `text--weight-${weight}`,\n                {\n                    'text--secondary': secondary,\n                }\n            )}\n            {...rest}\n        >\n            {children}\n        </Component>\n    )\n}\n\nexport default Text\n","import { useRef, useEffect, memo } from 'react'\nimport classNames from 'classnames'\nimport { usePrefersReducedMotion } from 'hooks'\nimport { spring, chain, delay, value } from 'popmotion'\nimport VisuallyHidden from 'components/VisuallyHidden'\nimport prerender from 'utils/prerender'\nimport './index.css'\n\n// prettier-ignore\nconst glyphs = [\n  'ア', 'イ', 'ウ', 'エ', 'オ',\n  'カ', 'キ', 'ク', 'ケ', 'コ',\n  'サ', 'シ', 'ス', 'セ', 'ソ',\n  'タ', 'チ', 'ツ', 'テ', 'ト',\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\n  'マ', 'ミ', 'ム', 'メ', 'モ',\n  'ヤ', 'ユ', 'ヨ', 'ー',\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\n];\n\nconst CharType = {\n    Glyph: 'glyph',\n    Value: 'value',\n}\n\nfunction shuffle(content, output, position) {\n    return content.map((value, index) => {\n        if (index < position) {\n            return { type: CharType.Value, value }\n        }\n\n        if (position % 1 < 0.5) {\n            const rand = Math.floor(Math.random() * glyphs.length)\n            return { type: CharType.Glyph, value: glyphs[rand] }\n        }\n\n        return { type: CharType.Glyph, value: output[index].value }\n    })\n}\n\nconst DecoderText = ({\n    text,\n    start = true,\n    delay: startDelay = 0,\n    className,\n    ...rest\n}) => {\n    const output = useRef([{ type: CharType.Glyph, value: '' }])\n    const container = useRef()\n    const reduceMotion = usePrefersReducedMotion()\n\n    useEffect(() => {\n        const containerInstance = container.current\n        const content = text.split('')\n        let animation\n\n        const renderOutput = () => {\n            const characterMap = output.current.map(item => {\n                return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`\n            })\n\n            containerInstance.innerHTML = characterMap.join('')\n        }\n\n        const springValue = value(0, position => {\n            output.current = shuffle(content, output.current, position)\n            renderOutput()\n        })\n\n        if (start && !animation && !reduceMotion && !prerender) {\n            animation = chain(\n                delay(startDelay),\n                spring({\n                    from: 0,\n                    to: content.length,\n                    stiffness: 8,\n                    damping: 5,\n                })\n            ).start(springValue)\n        }\n\n        if (reduceMotion) {\n            output.current = content.map((value, index) => ({\n                type: CharType.Value,\n                value: content[index],\n            }))\n            renderOutput()\n        }\n\n        return () => {\n            if (animation) {\n                animation.stop()\n            }\n        }\n    }, [reduceMotion, start, startDelay, text])\n\n    return (\n        <span className={classNames('decoder-text', className)} {...rest}>\n            <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n            <span aria-hidden className=\"decoder-text__content\" ref={container} />\n        </span>\n    )\n}\n\nexport default memo(DecoderText)\n","import classNames from 'classnames'\nimport { numToMs } from 'utils/style'\nimport './index.css'\n\nconst Divider = ({\n    lineWidth,\n    lineHeight,\n    notchWidth,\n    notchHeight,\n    collapseDelay,\n    collapsed,\n    className,\n    style,\n}) => (\n    <div\n        className={classNames('divider', className)}\n        style={{\n            '--lineWidth': lineWidth,\n            '--lineHeight': lineHeight,\n            '--notchWidth': notchWidth,\n            '--notchHeight': notchHeight,\n            '--collapseDelay': numToMs(collapseDelay),\n            ...style,\n        }}\n    >\n        <div\n            className={classNames('divider__line', {\n                'divider__line--collapsed': collapsed,\n            })}\n        />\n        <div\n            className={classNames('divider__notch', {\n                'divider__notch--collapsed': collapsed,\n            })}\n            style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n        />\n    </div>\n)\n\nDivider.defaultProps = {\n    lineWidth: '100%',\n    lineHeight: '2px',\n    notchWidth: '90px',\n    notchHeight: '10px',\n    collapsed: false,\n    collapseDelay: 0,\n}\n\nexport default Divider\n"],"sourceRoot":""}